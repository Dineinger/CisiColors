@    using System.Drawing
<div class="color-shades">
    <div class="light-color-shades">
        @for (int i = CutFromStart; i < Count - CutFromEnd; i++)
        {
            <ColorField Color=@GetShadedColor(StartColor, Color.White, i, Count - 1) Context="shadedColor">
                @if (ColorDescriptionMode >= ColorDescriptionMode.All)
                {
                    <ColorTextHex Color=@shadedColor WithDescription=false />
                }
            </ColorField>
        }
    </div>
    <div class="dark-color-shades">
        @for (int i = CutFromStart; i < Count - CutFromEnd; i++)
        {
            <ColorField Color=@GetShadedColor(StartColor, Color.Black, i, Count - 1) Context="shadedColor">
                @if (ColorDescriptionMode >= ColorDescriptionMode.All)
                {
                    <ColorTextHex Color=@shadedColor WithDescription=false />
                }
            </ColorField>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Color StartColor { get; set; }

    [Parameter]
    public ColorDescriptionMode ColorDescriptionMode { get; set; }

    [Parameter]
    public int CutFromStart { get; set; } = 1;

    [Parameter]
    public int CutFromEnd { get; set; } = 1;

    [Parameter]
    public int Count { get; set; } = 6;

    Color GetShadedColor(Color from, Color to, int index, int max)
    {
        var diff = GetDifference(from, to);

        return Color.FromArgb(
            from.R - ((diff.R * index) / max),
            from.G - ((diff.G * index) / max),
            from.B - ((diff.B * index) / max)
        );
    }

    (int R, int G, int B) GetDifference(Color left, Color right) => (
        left.R - right.R,
        left.G - right.G,
        left.B - right.B
    );
}
